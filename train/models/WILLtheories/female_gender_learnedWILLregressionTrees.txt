usePrologVariables: true.

% maxTreeDepthInNodes                 = 5
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 1
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 12
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10,000
% maxAcceptableNodeScoreToStop        = 0.003
% negPosRatio                         = 2.000
% testNegPosRatio                     = -1.000
% # of pos examples                   = 23
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 4:39:46 2/1/18.  [Using 3,430,864 memory cells.]  %%%%%

% FOR female_gender(A):
%   return 0;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */


% Clauses:

female_gender(A, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_female_gender(underscore, 0) :-  /* #neg=14 #pos=9 */ 
   !. // Flattened version of clause #1.


% The unique flattened literals:


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for female_gender.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).

logPrior(-1.8).
female_gender(D, Total) :- // A general accessor. 
   female_gender(D, 1000000, Total), !.
female_gender(D, Total) :- waitHere("This should not fail", female_gender(D, Total)).

female_gender(D, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_female_gender_tree1(D, TreesToUse, Total1),
   Total is LogPrior + Total1,
   !.
female_gender(D, TreesToUse, Total) :- waitHere("This should not fail", female_gender(D, TreesToUse, Total)).

getScore_female_gender_tree1(D, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_female_gender_tree1(D, TreesToUse, Total1) :- female_gender_tree1(D, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(0, []).

%%%%%  WILL-Produced Tree Combined @ 4:39:46 2/1/18.  [Using 1,608,600 memory cells.]  %%%%%

% FOR female_gender(A):
%   if ( workedunder(A, B) )
%   then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */


% Clauses:

female_gender(A, 0.35814893509951223) :- 
     workedunder(A, B), 
     !. // Clause #1.

female_gender(A, 0.21109011157010057) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_female_gender(a, 0.35814893509951223) :-  /* #neg=3 #pos=3 */ 
   workedunder(a, underscore),
   !. // Flattened version of clause #1.

flattened_female_gender(underscore, 0.21109011157010057) :-  /* #neg=11 #pos=6 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   workedunder(a, underscore)
